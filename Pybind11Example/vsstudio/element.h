#pragma once
#include <string>
#include "compas.h"
#include "joint.h"


class element
{
	public:

		/////////////////////////////////////////////////////////////////////////////////////////
		//Parameters
		/////////////////////////////////////////////////////////////////////////////////////////
		int id = -1;
		double thickness = 0;

		/////////////////////////////////////////////////////////////////////////////////////////
		//Basic Geometry Parameters 
		/////////////////////////////////////////////////////////////////////////////////////////
		CGAL::Bbox_3 aabb;
		IK::Vector_3 oob[5];
		std::vector<CGAL_Polyline> polylines; //pairs of polylines + each side face
		std::vector<IK::Plane_3> planes; //top and bottom planes + each side face

		std::vector<IK::Vector_3> edge_vectors;//if set
		IK::Segment_3 axis;

		/////////////////////////////////////////////////////////////////////////////////////////
		//Joinery Geometry Parameters 
		//pointers to joints, joint geometry will be modified inside joint to avoid copy
		//joint must be sorted according to edge id to be merged
		/////////////////////////////////////////////////////////////////////////////////////////
		//std::map<int, std::pair<bool, int>>edgeID_mf_jointID; //e0,true,jointID
		std::vector<std::pair<int,bool>> jointID_malefemale; //e0,true,jointID
		//std::vector<CGAL_Polyline> modified_polylines;
		//public Mesh mesh;

		/////////////////////////////////////////////////////////////////////////////////////////
		//Component parameters
		/////////////////////////////////////////////////////////////////////////////////////////
		std::string key;
		IK::Plane_3 component_plane;


		/////////////////////////////////////////////////////////////////////////////////////////
		//Constructors
		/////////////////////////////////////////////////////////////////////////////////////////
		element();
		element(int);

		void get_joints_geometry(std::vector<joint>& joints, std::vector <CGAL_Polyline>& output);
		void element::get_joints_geometry_as_closed_polylines(std::vector<joint>& joints, std::vector <CGAL_Polyline>& output);
};



